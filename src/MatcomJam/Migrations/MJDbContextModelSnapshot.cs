// <auto-generated />
using CodeFirstDatabase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace QuickApp.Migrations
{
    [DbContext(typeof(MJDbContext))]
    partial class MJDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CodeFirstDatabase.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("CodeFirstDatabase.Comment", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("BlogId");

                    b.HasKey("UserId", "BlogId");

                    b.HasIndex("BlogId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CodeFirstDatabase.Contest", b =>
                {
                    b.Property<int>("ContestId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("Duration");

                    b.Property<string>("Title");

                    b.HasKey("ContestId");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("CodeFirstDatabase.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("CodeFirstDatabase.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("CodeFirstDatabase.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int?>("ProblemId");

                    b.HasKey("Id");

                    b.HasIndex("ProblemId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CodeFirstDatabase.Problem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("RestrictionId");

                    b.Property<string>("Tag");

                    b.HasKey("Id");

                    b.HasIndex("RestrictionId");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("CodeFirstDatabase.ProblemContest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ContestId");

                    b.Property<string>("Description");

                    b.Property<int>("ProblemId");

                    b.HasKey("Id");

                    b.HasIndex("ContestId");

                    b.HasIndex("ProblemId");

                    b.ToTable("ProblemContests");
                });

            modelBuilder.Entity("CodeFirstDatabase.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("MaximumMessages");

                    b.Property<int>("MemoryLimit");

                    b.Property<int>("NumberOfNodes");

                    b.Property<int>("SizeOfMessages");

                    b.Property<int>("TimeLimit");

                    b.HasKey("Id");

                    b.ToTable("Restriction");
                });

            modelBuilder.Entity("CodeFirstDatabase.Solution", b =>
                {
                    b.Property<int>("ContestantId");

                    b.Property<int>("LanguageId");

                    b.Property<int>("ProblemContestId");

                    b.HasKey("ContestantId", "LanguageId", "ProblemContestId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProblemContestId");

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("CodeFirstDatabase.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CodeFirstDatabase.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CasesPath");

                    b.Property<int?>("ProblemId");

                    b.HasKey("TestId");

                    b.HasIndex("ProblemId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("CodeFirstDatabase.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<int>("GroupId");

                    b.Property<int>("InstitutionId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("CodeFirstDatabase.UserTeam", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TeamID");

                    b.HasKey("UserId", "TeamID");

                    b.HasIndex("TeamID");

                    b.ToTable("UserTeams");
                });

            modelBuilder.Entity("CodeFirstDatabase.Contestant", b =>
                {
                    b.HasBaseType("CodeFirstDatabase.User");

                    b.Property<int>("ContestId");

                    b.Property<int>("ContestantId");

                    b.Property<int>("TeamId");

                    b.HasIndex("ContestId");

                    b.HasIndex("TeamId");

                    b.ToTable("Contestant");

                    b.HasDiscriminator().HasValue("Contestant");
                });

            modelBuilder.Entity("CodeFirstDatabase.Blog", b =>
                {
                    b.HasOne("CodeFirstDatabase.User", "User")
                        .WithMany("Blog")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeFirstDatabase.Comment", b =>
                {
                    b.HasOne("CodeFirstDatabase.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeFirstDatabase.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CodeFirstDatabase.Language", b =>
                {
                    b.HasOne("CodeFirstDatabase.Problem")
                        .WithMany("Languages")
                        .HasForeignKey("ProblemId");
                });

            modelBuilder.Entity("CodeFirstDatabase.Problem", b =>
                {
                    b.HasOne("CodeFirstDatabase.Restriction", "Restriction")
                        .WithMany()
                        .HasForeignKey("RestrictionId");
                });

            modelBuilder.Entity("CodeFirstDatabase.ProblemContest", b =>
                {
                    b.HasOne("CodeFirstDatabase.Contest", "Constest")
                        .WithMany("ProblemContest")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeFirstDatabase.Problem", "Problem")
                        .WithMany("ProblemContests")
                        .HasForeignKey("ProblemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeFirstDatabase.Solution", b =>
                {
                    b.HasOne("CodeFirstDatabase.Contestant", "Contestant")
                        .WithMany("Solutions")
                        .HasForeignKey("ContestantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CodeFirstDatabase.Language", "Language")
                        .WithMany("Solutions")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeFirstDatabase.ProblemContest", "ProblemContest")
                        .WithMany("Solutions")
                        .HasForeignKey("ProblemContestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeFirstDatabase.Test", b =>
                {
                    b.HasOne("CodeFirstDatabase.Problem")
                        .WithMany("Tests")
                        .HasForeignKey("ProblemId");
                });

            modelBuilder.Entity("CodeFirstDatabase.User", b =>
                {
                    b.HasOne("CodeFirstDatabase.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeFirstDatabase.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeFirstDatabase.UserTeam", b =>
                {
                    b.HasOne("CodeFirstDatabase.Team", "Team")
                        .WithMany("UserTeams")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeFirstDatabase.User", "User")
                        .WithMany("UserTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CodeFirstDatabase.Contestant", b =>
                {
                    b.HasOne("CodeFirstDatabase.Contest", "Contest")
                        .WithMany("Contestants")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeFirstDatabase.Team", "Team")
                        .WithMany("Contestants")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
